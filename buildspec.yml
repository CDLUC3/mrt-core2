version: 0.2

# Pre-requisites
# - Create CodeBuild project
#   - Provide minimal github credentials to access public repo

phases:
  pre_build:
    on-failure: ABORT
    commands:
    - cp settings.xml ~/.m2/
    - export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain cdlib-uc3-mrt --domain-owner $AWS_ACCOUNT_ID --region $AWS_REGION --query authorizationToken --output text`
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${ECR_REGISTRY}

    - COMMIT=`git rev-parse --short HEAD`
    - BRANCH=`git symbolic-ref -q --short HEAD || git name-rev $(git rev-parse --short HEAD) | cut -d' ' -f2 || echo ''`
    - TAG=`git describe --tags --exact-match 2> /dev/null || echo ''`
    - BRANCHTAG=`git describe --tags --exact-match 2> /dev/null || git symbolic-ref -q --short HEAD || git name-rev $(git rev-parse --short HEAD) | cut -d' ' -f2 || git rev-parse --short HEAD`
    - echo "Branchtag ${BRANCHTAG}"

  build:
    on-failure: ABORT
    commands:
    - mvn -ntp -Pparent clean deploy
    - mvn clean deploy -f reflect/pom.xml 
    - mvn -ntp clean install 
    - mvn deploy:deploy-file -Durl=${CODEARTIFACT_URL} -DrepositoryId=cdlib-uc3-mrt-uc3-mrt-java -Dfile=$(ls core/target/mrt-core-*.jar)
    - mvn -ntp javadoc:javadoc
    - rm -rf api/mrt-core2
    - mkdir -p api/mrt-core2/java
    - cp -r */target/site/apidocs/* api/mrt-core2/java
    - echo aws s3 cp --recursive api s3://${S3CFBUCKET}/api 
    - aws s3 cp --recursive api s3://${S3CFBUCKET}/api
    - aws cloudfront create-invalidation --distribution-id ${CFDISTRIBUTIONID} --paths /* --region us-east-1
